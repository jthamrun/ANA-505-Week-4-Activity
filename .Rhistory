Install and call the package dplyr
source("~/Documents/McDaniel College/ANA505/Week 4/Week 4 R activity dplyr(1).R", echo=TRUE)
source("~/Documents/McDaniel College/ANA505/Week 4/Week 4 R activity dplyr(1).R", echo=TRUE)
#Week 4: dplyr package
#Task: Write the function to get a dataset from Base R: Titanic
#and give the dataframe a new name of your choice
#(hint: you will want your data to be a dataframe. Use the function: as.data.frame(Titanic))
data <- as.data.frame(Titanic)
titanicData <- data
#See the top rows of the data
#TASK: Write the function to see the top rows of the data
head(titanicData)
#Install and call the package dplyr
#TASK: Write the functions to install and call dplyr
#install.packages("tidyverse")
#library(dplyr)
#Let's just see the Survived and Sex columns
#Task: Write the function to 'select' the Survived and Sex columns
#(hint: use the 'select' function)
#Let's name the dataset with just the two columns, Survived and Sex
#TASK: Write the function to save the two columns as one new dataset
#and give it a name
#Let's get rid of the Sex column in the new dataset created above
#TASK: Write the function that deselects the sex column
#(hint: use the 'select' function to not select a -column)
#Let's rename a column name
#TASK: Write the function that renames 'Sex' to 'Gender'
#Let's make a new dataframe with the new column name
#TASK: Write the function that names a new dataset that includes the 'gender' column
#Let's 'filter' just the males from our dataset
#TASK: Write the function that includes only rows that are 'male'
#Let's 'arrange' our data by gender (not the data you just filtered)
#TASK: Write the function to group the data by gender (hint: arrange())
#Let's see how many people were examined in the dataset (total the frequency in the original dataframe)
#TASK: Sum the Freq column
#TASK: After you run it, write the total here:____
#Since we have a males dataset, let's make a females dataset
#TASK: Write the function that includes only rows that are 'female'
#And now let's join the males and females
#TASK: Write the function that joins the male and female rows
#(hint: try using 'union' or 'bind_rows')
#Optional Task: add any of the other functions
#you learned about from the dplyr package
you just filtered)
#Week 4: dplyr package
#Task: Write the function to get a dataset from Base R: Titanic
#and give the dataframe a new name of your choice
#(hint: you will want your data to be a dataframe. Use the function: as.data.frame(Titanic))
data <- as.data.frame(Titanic)
titanicData <- data
#See the top rows of the data
#TASK: Write the function to see the top rows of the data
head(titanicData)
#Install and call the package dplyr
#TASK: Write the functions to install and call dplyr
#install.packages("tidyverse")
#library(dplyr)
#Let's just see the Survived and Sex columns
#Task: Write the function to 'select' the Survived and Sex columns
#(hint: use the 'select' function)
#Let's name the dataset with just the two columns, Survived and Sex
#TASK: Write the function to save the two columns as one new dataset
#and give it a name
#Let's get rid of the Sex column in the new dataset created above
#TASK: Write the function that deselects the sex column
#(hint: use the 'select' function to not select a -column)
#Let's rename a column name
#TASK: Write the function that renames 'Sex' to 'Gender'
#Let's make a new dataframe with the new column name
#TASK: Write the function that names a new dataset that includes the 'gender' column
#Let's 'filter' just the males from our dataset
#TASK: Write the function that includes only rows that are 'male'
#Let's 'arrange' our data by gender (not the data you just filtered)
#TASK: Write the function to group the data by gender (hint: arrange())
#Let's see how many people were examined in the dataset (total the frequency in the original dataframe)
#TASK: Sum the Freq column
#TASK: After you run it, write the total here:____
#Since we have a males dataset, let's make a females dataset
#TASK: Write the function that includes only rows that are 'female'
#And now let's join the males and females
#TASK: Write the function that joins the male and female rows
#(hint: try using 'union' or 'bind_rows')
#Optional Task: add any of the other functions
#you learned about from the dplyr package
#Week 4: dplyr package
#Task: Write the function to get a dataset from Base R: Titanic
#and give the dataframe a new name of your choice
#(hint: you will want your data to be a dataframe. Use the function: as.data.frame(Titanic))
data <- as.data.frame(Titanic)
titanicData <- data
#See the top rows of the data
#TASK: Write the function to see the top rows of the data
head(titanicData)
#Install and call the package dplyr
#TASK: Write the functions to install and call dplyr
install.packages("tidyverse")
library(dplyr)
#Let's just see the Survived and Sex columns
#Task: Write the function to 'select' the Survived and Sex columns
#(hint: use the 'select' function)
titanicData %>% select(Survived, Sex)
#Let's name the dataset with just the two columns, Survived and Sex
#TASK: Write the function to save the two columns as one new dataset
#and give it a name
#Let's get rid of the Sex column in the new dataset created above
#TASK: Write the function that deselects the sex column
#(hint: use the 'select' function to not select a -column)
#Let's rename a column name
#TASK: Write the function that renames 'Sex' to 'Gender'
#Let's make a new dataframe with the new column name
#TASK: Write the function that names a new dataset that includes the 'gender' column
#Let's 'filter' just the males from our dataset
#TASK: Write the function that includes only rows that are 'male'
#Let's 'arrange' our data by gender (not the data you just filtered)
#TASK: Write the function to group the data by gender (hint: arrange())
#Let's see how many people were examined in the dataset (total the frequency in the original dataframe)
#TASK: Sum the Freq column
#TASK: After you run it, write the total here:____
#Since we have a males dataset, let's make a females dataset
#TASK: Write the function that includes only rows that are 'female'
#And now let's join the males and females
#TASK: Write the function that joins the male and female rows
#(hint: try using 'union' or 'bind_rows')
#Optional Task: add any of the other functions
#you learned about from the dplyr package
View(data)
View(titanicData)
#Week 4: dplyr package
#Task: Write the function to get a dataset from Base R: Titanic
#and give the dataframe a new name of your choice
#(hint: you will want your data to be a dataframe. Use the function: as.data.frame(Titanic))
data <- as.data.frame(Titanic)
titanicData <- data
#See the top rows of the data
#TASK: Write the function to see the top rows of the data
head(titanicData)
#Install and call the package dplyr
#TASK: Write the functions to install and call dplyr
install.packages("tidyverse")
library(dplyr)
#Let's just see the Survived and Sex columns
#Task: Write the function to 'select' the Survived and Sex columns
#(hint: use the 'select' function)
titanicData %>% select(Survived, Sex)
#Let's name the dataset with just the two columns, Survived and Sex
#TASK: Write the function to save the two columns as one new dataset
#and give it a name
titanicDataNew <- titanicData %>%
select(Survived, Sex) %>%
as.data.frame()
#Let's get rid of the Sex column in the new dataset created above
#TASK: Write the function that deselects the sex column
#(hint: use the 'select' function to not select a -column)
#Let's rename a column name
#TASK: Write the function that renames 'Sex' to 'Gender'
#Let's make a new dataframe with the new column name
#TASK: Write the function that names a new dataset that includes the 'gender' column
#Let's 'filter' just the males from our dataset
#TASK: Write the function that includes only rows that are 'male'
#Let's 'arrange' our data by gender (not the data you just filtered)
#TASK: Write the function to group the data by gender (hint: arrange())
#Let's see how many people were examined in the dataset (total the frequency in the original dataframe)
#TASK: Sum the Freq column
#TASK: After you run it, write the total here:____
#Since we have a males dataset, let's make a females dataset
#TASK: Write the function that includes only rows that are 'female'
#And now let's join the males and females
#TASK: Write the function that joins the male and female rows
#(hint: try using 'union' or 'bind_rows')
#Optional Task: add any of the other functions
#you learned about from the dplyr package
View(titanicDataNew)
View(titanicData)
View(titanicDataNew)
#Let's get rid of the Sex column in the new dataset created above
#TASK: Write the function that deselects the sex column
#(hint: use the 'select' function to not select a -column)
titanicDataNew <- titanicDataNew %>%
select(-Sex)
View(titanicDataNew)
#Let's rename a column name
#TASK: Write the function that renames 'Sex' to 'Gender'
titanicDataNew %>% select(Sex = Gender)
#Let's rename a column name
#TASK: Write the function that renames 'Sex' to 'Gender'
titanicData %>% select(Sex = Gender)
#Let's rename a column name
#TASK: Write the function that renames 'Sex' to 'Gender'
titanicDataNew %>% rename(Sex = Gender)
#Let's rename a column name
#TASK: Write the function that renames 'Sex' to 'Gender'
titanicData %>% rename(Sex = Gender)
#Week 4: dplyr package
#Task: Write the function to get a dataset from Base R: Titanic
#and give the dataframe a new name of your choice
#(hint: you will want your data to be a dataframe. Use the function: as.data.frame(Titanic))
data <- as.data.frame(Titanic)
titanicData <- data
#See the top rows of the data
#TASK: Write the function to see the top rows of the data
head(titanicData)
#Install and call the package dplyr
#TASK: Write the functions to install and call dplyr
install.packages("tidyverse")
library(dplyr)
#Let's just see the Survived and Sex columns
#Task: Write the function to 'select' the Survived and Sex columns
#(hint: use the 'select' function)
titanicData %>% select(Survived, Sex)
#Let's name the dataset with just the two columns, Survived and Sex
#TASK: Write the function to save the two columns as one new dataset
#and give it a name
titanicDataNew <- titanicData %>%
select(Survived, Sex) %>%
as.data.frame()
#Let's get rid of the Sex column in the new dataset created above
#TASK: Write the function that deselects the sex column
#(hint: use the 'select' function to not select a -column)
titanicDataNew <- titanicDataNew %>%
select(-Sex)
#Let's rename a column name
#TASK: Write the function that renames 'Sex' to 'Gender'
titanicData %>% rename(Sex = Gender)
View(titanicData)
#Let's rename a column name
#TASK: Write the function that renames 'Sex' to 'Gender'
titanicDataNew %>% rename(Gender = Sex)
#Let's rename a column name
#TASK: Write the function that renames 'Sex' to 'Gender'
titanicData %>% rename(Gender = Sex)
View(titanicData)
#Week 4: dplyr package
#Task: Write the function to get a dataset from Base R: Titanic
#and give the dataframe a new name of your choice
#(hint: you will want your data to be a dataframe. Use the function: as.data.frame(Titanic))
data <- as.data.frame(Titanic)
titanicData <- data
#See the top rows of the data
#TASK: Write the function to see the top rows of the data
head(titanicData)
#Install and call the package dplyr
#TASK: Write the functions to install and call dplyr
install.packages("tidyverse")
library(dplyr)
#Let's just see the Survived and Sex columns
#Task: Write the function to 'select' the Survived and Sex columns
#(hint: use the 'select' function)
titanicData %>% select(Survived, Sex)
#Let's name the dataset with just the two columns, Survived and Sex
#TASK: Write the function to save the two columns as one new dataset
#and give it a name
titanicDataNew <- titanicData %>%
select(Survived, Sex) %>%
as.data.frame()
#Let's get rid of the Sex column in the new dataset created above
#TASK: Write the function that deselects the sex column
#(hint: use the 'select' function to not select a -column)
titanicDataNew <- titanicDataNew %>%
select(-Sex)
#Let's rename a column name
#TASK: Write the function that renames 'Sex' to 'Gender'
titanicData %>% rename(Gender = Sex)
#Let's make a new dataframe with the new column name
#TASK: Write the function that names a new dataset that includes the 'gender' column
titanicDataGender <- titanicData %>%
mutate(Gender = Sex)
#Let's 'filter' just the males from our dataset
#TASK: Write the function that includes only rows that are 'male'
#Let's 'arrange' our data by gender (not the data you just filtered)
#TASK: Write the function to group the data by gender (hint: arrange())
#Let's see how many people were examined in the dataset (total the frequency in the original dataframe)
#TASK: Sum the Freq column
#TASK: After you run it, write the total here:____
#Since we have a males dataset, let's make a females dataset
#TASK: Write the function that includes only rows that are 'female'
#And now let's join the males and females
#TASK: Write the function that joins the male and female rows
#(hint: try using 'union' or 'bind_rows')
#Optional Task: add any of the other functions
#you learned about from the dplyr package
View(titanicDataGender)
titanicDataGender <- titanicData %>%
rename(Gender = Sex)
#Let's 'filter' just the males from our dataset
#TASK: Write the function that includes only rows that are 'male'
titanicDataGender %>% filter(Gender == "Male")
View(titanicDataGender)
#Let's 'arrange' our data by gender (not the data you just filtered)
#TASK: Write the function to group the data by gender (hint: arrange())
titanicDataGender %>% arrange(Gender)
#Let's see how many people were examined in the dataset (total the frequency in the original dataframe)
#TASK: Sum the Freq column
#TASK: After you run it, write the total here:____
titanicData %>% summarise(height = sum(Freq, na.rm = TRUE))
#Let's see how many people were examined in the dataset (total the frequency in the original dataframe)
#TASK: Sum the Freq column
#TASK: After you run it, write the total here:2201
titanicData %>% summarise(Freq = sum(Freq, na.rm = TRUE))
totalPeopleExamined <- sum(myTitanicData$Freq)
totalPeopleExamined <- sum(titanicData$Freq)
#Week 4: dplyr package
#Task: Write the function to get a dataset from Base R: Titanic
#and give the dataframe a new name of your choice
#(hint: you will want your data to be a dataframe. Use the function: as.data.frame(Titanic))
data <- as.data.frame(Titanic)
titanicData <- data
#See the top rows of the data
#TASK: Write the function to see the top rows of the data
head(titanicData)
#Install and call the package dplyr
#TASK: Write the functions to install and call dplyr
install.packages("tidyverse")
library(dplyr)
#Let's just see the Survived and Sex columns
#Task: Write the function to 'select' the Survived and Sex columns
#(hint: use the 'select' function)
titanicData %>% select(Survived, Sex)
#Let's name the dataset with just the two columns, Survived and Sex
#TASK: Write the function to save the two columns as one new dataset
#and give it a name
titanicDataNew <- titanicData %>%
select(Survived, Sex) %>%
as.data.frame()
#Let's get rid of the Sex column in the new dataset created above
#TASK: Write the function that deselects the sex column
#(hint: use the 'select' function to not select a -column)
titanicDataNew <- titanicDataNew %>%
select(-Sex)
#Let's rename a column name
#TASK: Write the function that renames 'Sex' to 'Gender'
titanicData %>% rename(Gender = Sex)
#Let's make a new dataframe with the new column name
#TASK: Write the function that names a new dataset that includes the 'gender' column
titanicDataGender <- titanicData %>%
rename(Gender = Sex)
#Let's 'filter' just the males from our dataset
#TASK: Write the function that includes only rows that are 'male'
titanicDataGender %>% filter(Gender == "Male")
#Let's 'arrange' our data by gender (not the data you just filtered)
#TASK: Write the function to group the data by gender (hint: arrange())
titanicDataGender %>% arrange(Gender)
#Let's see how many people were examined in the dataset (total the frequency in the original dataframe)
#TASK: Sum the Freq column
#TASK: After you run it, write the total here:2201
titanicData %>% summarise(Freq = sum(Freq, na.rm = TRUE))
#Since we have a males dataset, let's make a females dataset
#TASK: Write the function that includes only rows that are 'female'
#And now let's join the males and females
#TASK: Write the function that joins the male and female rows
#(hint: try using 'union' or 'bind_rows')
#Optional Task: add any of the other functions
#you learned about from the dplyr package
frequency <- sum(titanicData$Freq)
rm(frequency)
rm(totalPeopleExamined)
titanicDataMale <- titanicDataGender %>%
filter(Gender == "Male")
View(titanicDataMale)
titanicDataFemale <- titanicDataGender %>%
filter(Gender == "Female")
View(titanicDataMale)
View(titanicDataFemale)
#And now let's join the males and females
#TASK: Write the function that joins the male and female rows
#(hint: try using 'union' or 'bind_rows')
titanicDataGenderCombined <- union(titanicDataMale, titanicDataFemale)
View(titanicDataGenderCombined)
view(titanicDataGenderCombined)
View(titanicDataGenderCombined)
print(titanicDataGenderCombined)
